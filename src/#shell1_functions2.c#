/*
** EPITECH PROJECT, 2018
** shell1_functions2.c
** File description:
** shell1_functions2.c
*/

#include "../include/my.h"

int cmp_env(char *env, char *cmp)
{
    int i = 0;

    for (; cmp[i] && env[i] != '=' && env[i] == cmp[i]; i++);
    if (cmp[i] == '=')
        return (1);
    return (0);
}

char *get_current_path(env_var *env)
{
    int i = 4;
    env_var *tmp = env;

    for (; tmp && my_strcmp(cut(tmp), "PWD"); tmp = tmp->next);
    if (!tmp)
        return (".");
    char *string = malloc(sizeof(char) * my_strlen(env->env));
    for (; tmp->env[i]; i++)
    {
        string[i] = tmp->env[i];
    }
    string[i] = 0;
    return (string);
}

void move_dir(env_var *env, char *path)
{
    static char *oldpath = NULL;
    if (!path)
        return;
    if (oldpath == NULL)
        oldpath = get_current_path(env);
    if (my_strcmp("-", path) == 0) {
        oldpath = path;
        chdir(oldpath);
        return;
    }
    oldpath = get_current_path(env);
    chdir(path);
}

void my_exit(char *value)
{
    if (value == NULL) {
        exit(0);
    } else
        exit(my_getnbr(value));
}

void my_parse_cmd(env_var *env, char **my_tab)
{
    while (!(my_tab) || !(my_tab[0]))
        return;
    for (int i = 0; my_tab[i]; i++)

    if (my_strcmp(my_tab[0], "exit") == 0)
        my_exit(my_tab[1]);
    if (my_strcmp(my_tab[0], "setenv") == 0)
        my_setenv(env, my_tab[1], my_tab[2]);
    if (my_strcmp(my_tab[0], "unsetenv") == 0)
        my_unsetenv(env, my_tab[1]);
    if (my_strcmp(my_tab[0], "env") == 0)
        my_env(env);
    if (my_strcmp(my_tab[0], "cd") == 0)
        move_dir(env, my_tab[1]);
    else
        execute(env, my_tab);
}


